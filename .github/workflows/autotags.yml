# This workflow automatically tags the repository with the current SFML version
# whenever a push is made to the main branch. The tag format is PONG_SFML-<version>_<number>,
# where <version> is the SFML version extracted from the submodule's CMakeLists.txt,
# and <number> is an incrementing number for each tag with that version.  

name: Auto Tag on Main Push

on:
  push:
    branches: [main]

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Git user
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      # === Extract SFML version from submodule CMakeLists.txt ===
      - name: Extract SFML version
        id: sfml
        run: |
          SFML_CMAKE="external/SFML/CMakeLists.txt"
          if [[ ! -f "$SFML_CMAKE" ]]; then
            echo " SFML CMakeLists.txt not found at $SFML_CMAKE"
            exit 1
          fi

          VERSION=$(grep -Po '(?<=project\(SFML VERSION )[^)]+(?=\))' "$SFML_CMAKE")

          if [[ -z "$VERSION" ]]; then
            echo " Failed to extract SFML version from $SFML_CMAKE"
            exit 1
          fi

          echo " Detected SFML version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # === Generate next tag based on SFML version ===
      - name: Generate next tag
        id: tag
        run: |
          PREFIX="PONG_SFML-${{ steps.sfml.outputs.version }}_"
          LATEST_TAG=$(git tag --list "${PREFIX}*" | sort -V | tail -n 1)

          if [[ -z "$LATEST_TAG" ]]; then
            NEXT_NUM="0001"
          else
            LAST_NUM=$(echo "$LATEST_TAG" | sed -E "s/^${PREFIX}//")
            NEXT_NUM=$(printf "%04d" $((10#$LAST_NUM + 1)))
          fi

          NEW_TAG="${PREFIX}${NEXT_NUM}"
          echo "New tag to create: $NEW_TAG"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

      # === Create and push the new tag ===
      - name: Create and push tag
        run: |
          git tag ${{ steps.tag.outputs.tag }}
          git push origin ${{ steps.tag.outputs.tag }}
